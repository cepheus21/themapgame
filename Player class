import java.util.ArrayList;
public  class Player {
	String Nation_name; //the name of the nation the player plays as
	String Player_name; //the owner of the nation, the name of the player themself
	double bank; //the amount of raw currency, think $$$
	int trade; //how much the player is making from trade;
	static int player_diplomacy; //the count of diplomatic pull a player has
	static int player_espionage; //the count of intrigue the player has
	int research; //the amount of research the player has generated
	boolean trading = false; //whether or not a player is trading
	static double player_production; //the count of production a player has
	static double econ_to_prod = 2; //the conversion ratio from $$$ to production
	ArrayList<Ships> fleets = new ArrayList<Ships>(); //the container for various fleets of composition and sizes
	ArrayList<Ships> ship_classes = new ArrayList<Ships>(); //the container for various ship classes
	boolean at_war = false; //whether or not the player is at war
	ArrayList<Planet> planets = new ArrayList<Planet>(); //the container for all of the planets the player has control over
	
	/* Function: addPlanet
		Adds a planet to a player's economy and empire. Adds 'planet' to the player's ArrayList of planets. 'planet''s 
		'Owner' String variable is also changed accordingly.
		
		Returns: void
		
		See also: removePlanet
	*/
	public void addPlanet(Planet planet){
		planets.add(planet);
		planet.setOwner(this.getNName());
	}
	/* Function: removePlanet
		Removes a planet from a player's economy and empire. Removes 'planet' from the player's ArrayList of planets.
		'planet''s 'Owner' String variable is also changed accordingly.
	
	*/
	public void removePlanet(Planet planet){
		int placeholder = planets.indexOf(planet);
		planet.setOwner("");
		planets.remove(placeholder);
	}
	//setter and getter for the Player Name
	public void setPName(String name){
		Player_name = name;
	}
	public String getPName(){
		return Player_name;
	}
	//setter and getter for the Nation Name
	public void setNName(String name){
		Nation_name = name;
	}
		public String getNName(){
		return Nation_name;
	}
	//getter, adder and subtracter for Bank, not sure how setting a lesser or negative number would work
	public void addBank(double money){
		bank += money;
	}
	public void subtractBank(double money){
		bank -= money;
	}
	public double getBank(){
		return bank;
	}
	//getter, adder and subtracter for Production, not sure how setting a lesser or negative number would work
	public void addProd(double prod){
		player_production += prod;
	}
	public void subtractProd(double prod){
		player_production -= prod;
	}
	public double getProd(){
		return player_production;
	}
	//a getter for the total spendable production
	public double getTotal(double prod, double money){
		double total_spendable = prod + money * econ_to_prod;
		return total_spendable;
	}
	//Used to confirm the operation of various commands. Easier than looking up the individual memory locations
	public void printInfo(){
		System.out.println("Player name: " + this.getPName());
		System.out.println("Nation name: " + this. getNName());
		System.out.println("Number of planets: " + planets.size());
		System.out.println("Money: " + getBank());
		System.out.println("Production: " + getProd());
		if(fleets.size() == 1)
		System.out.println("Number of ships: " + fleets.size() + " ship.");
		else 
			System.out.println("Number of ships: " + fleets.size() + " ships.");
		System.out.println("Total Spendable Production: " + getTotal(getProd(), getBank()) + "\n");
		
	}
	//Create building 'buidling' on planet 'planet', and adding it to the planet's building ArrayList
	public void makeBuilding(Planet planet, String building){
		planet.addBuilding(building);
	}
	//Using the planets in the player's planet's arraylist, this pulls the economic data of the planets and compiles them
	into variables that are fed into the player's overall economy.
	public void generateEconomy(){
		double credits = 0;
		double prod = 0;
		for(int i = 0; i < planets.size(); i++){
			credits += planets.get(i).getMoney();
			prod += planets.get(i).getProd();
			}
		this.addBank(credits);
		this.addProd(prod);
	}
	//Create a ship class, or an overall ship archetype
public void makeShipClass(String Name, String Class_type){
	ship_classes.add(new Player.Ships(Name, Class_type));
	System.out.println("Ship class " + ship_classes.get(0).getClassType() + " has been designed.");
	}
	//Create individual ships, and clarifying the location where they're constructed.
	public void makeShip(Ships ship, Planet planet){
		player_production -= ship.getCost();
		fleets.add(ship);
		System.out.println("A " + ship.getName() + " class ship has been constructed on " + planet.getName() + ".");
	}
	
	public static class Planet {
		int ground_slots, ground_slotsfilled, space_slots, space_slotsfilled, production, research, espionage, diplomacy; //various building slots and other modifiers
		double money, trade_value;
		boolean trading; //whether or not the planet is connected to a trade network
		String Type; //the biome type of the planet
		boolean lab_spec_building, hq_spec_building, emb_spec_building, can_Build_Ships = false; //checker for headquarters, labs, embassies, and orbital shipyards, can only be one per planet
		String Name;
		String owner;
		ArrayList<String> groundbuildings = new ArrayList<String>();
		ArrayList<String> spacebuildings = new ArrayList<String>();
		
		public void setType(String type){
			switch(type){
			case "Archipelago":
				Type = "Archipelago";
				production = 5;
				ground_slots = 16;
				space_slots = 40;
				money = 12;
				break;
			case "Desert":
				Type = "Desert";
				production = 6;
				ground_slots = 20;
				space_slots = 40;
				money = 16;
				break;
			case "Eucemenopolis":
				Type = "Eucemenopolis";
				production = 20;
				ground_slots =  52;
				space_slots = 100;
				money = 300;
				break;
			case "Ice":
				Type = "Ice";
				production = 5;
				ground_slots = 10;
				space_slots = 40;
				money = 10;
				break;
			case "Ocean":
				Type = "Ocean";
				production = 6;
				ground_slots = 12;
				space_slots = 40;
				money = 10;
				break;
			case "Paradise":
				Type = "Paradise";
				production = 6;
				ground_slots = 20;
				space_slots = 40;
				money = 100;
				break;
			case "Terran":
				Type = "Terran";
				production = 8;
				ground_slots = 18;
				space_slots = 40;
				money = 14;
				break;
			case "Mountainous":
				Type = "Mountainous";
				production = 10;
				ground_slots = 26;
				space_slots = 40;
				money = 22;
				break;
			case "Forest":
				Type = "Forest";
				production = 10;
				ground_slots = 17;
				space_slots = 40;
				money = 13;
				break;
			case "Volcanic":
				Type = "Volcanic";
				production =  15;
				ground_slots = 20;
				space_slots = 40;
				money = 16;
				break;
			}
		}
		
		public void setOwner(String Owner){
			owner = Owner;
		}
		public String getOwner(){
			return owner;
		}
		
		public void setName(String name){
			Name = name;
		}
		public String getName(){
			return Name;
		}
		public String getType(){
			return Type;
		}
		public double getMoney(){
			return money;
		}
		public double getProd(){
			return production;
		}
		public void getSlots(){
			System.out.println(this.ground_slotsfilled + " ground slots filled out of " + this.ground_slots);
			System.out.println(this.space_slotsfilled + " space slots filled out of " + this.space_slots + "\n");
		}
		public void printInfo(){
			System.out.println("Planet Name: " + this.getName());
			System.out.println("Planet Type: " + this.getType());
			System.out.println("Money: " + this.getMoney());
			System.out.println("Production: " + this.getProd());
			System.out.println("Owner: " + this.getOwner());
			System.out.print("Buildings: ");
			for(int i = 0; i < groundbuildings.size(); i++)
				System.out.print(groundbuildings.get(i) + "   ");
			for(int i = 0; i < spacebuildings.size(); i++)
				System.out.println(spacebuildings.get(i) + "  ");
			this.getSlots();
		}
		
		public void addBuilding(String building){ //adding a building to a planet's production network
			if(building == "Mine"){
				if(this.ground_slotsfilled < (this.ground_slots - 2)){
					this.production += 2;
					this.ground_slotsfilled +=2;
					player_production -= 1;
					groundbuildings.add("Mine");
					System.out.println("A Mine has been constructed on " + this.getName());
				}
			}
			else if(building == "Factory"){
				if(this.ground_slotsfilled < (this.ground_slots - 4)){
					this.production += 5;
					this.ground_slotsfilled += 4;
					player_production -= 2;
					groundbuildings.add("Factory");
					System.out.println("A Factory has been constructed on " + this.getName());
				}
			}
			else if(building == "Laboratory"){
				if(this.ground_slotsfilled < this.ground_slots - 3){
					if(lab_spec_building == false){
						this.research += 5;
						this.ground_slotsfilled += 3;
						player_production -= 2;
						this.lab_spec_building = true;
						groundbuildings.add("Laboratory");
						System.out.println("A Laboratory has been constructed on " + this.getName());
					}
				}
			}
			else if(building == "Bank"){
				if(this.ground_slotsfilled < (this.ground_slots - 4)){
					this.money *= 1.01;
					this.ground_slotsfilled += 4;
					player_production -= 6;
					groundbuildings.add("Bank");
					System.out.println("A Bank has been constructed on " + this.getName());
				}
			}
			else if(building == "Embassy"){
				if(this.ground_slotsfilled < (this.ground_slots - 3)){
					if(emb_spec_building == false){
						player_diplomacy += 5;
						ground_slotsfilled += 3;
						player_production -= 5;
						this.emb_spec_building = true;
						groundbuildings.add("Embassy");
						System.out.println("An Embasssy has been constructed on " + this.getName());
						}
					}
			}
			else if(building == "Headquarters"){
				if(this.ground_slotsfilled < (this.ground_slots - 4) && this.hq_spec_building == false){
						player_espionage += 5;
						this.ground_slotsfilled += 4;
						player_production -= 7;
						this.hq_spec_building = true;
						groundbuildings.add("Headquarters");
						System.out.println("A Headquarters has been constructed on " + this.getName());
					}
				}
			else if(building == "Orbital Shipyard"){
				if(this.space_slotsfilled < this.space_slots - 10){
					production += 10;
					player_production -= 6;
					this.can_Build_Ships = true;
					this.space_slotsfilled += 10;
					spacebuildings.add("Orbital Shipyard");
					System.out.println("An Orbital Shipyard has been constructed on " + this.getName());
				}
			}
			else if(building == "Orbital Mining"){
				if(this.space_slotsfilled < this.space_slots - 5){
					production += 5;
					player_production -= 3;
					this.space_slotsfilled += 5;
					spacebuildings.add("Orbital Mining");
					System.out.println("An Orbital Mining Platform has been constructed on " + this.getName());
				}
			}
			else if(building == "Orbital Banking"){
				if(space_slotsfilled < this.space_slots - 4){
					money *= 1.01;
					if(this.trading == true){
					trade_value += 0.5;
					money += trade_value;
					spacebuildings.add("Orbital Banking");
					System.out.println("An Orbital Banking Platform has been constructed on " + this.getName());
					}
				}
			}
			else if(building == "Orbital Station"){
				if(this.space_slotsfilled < this.space_slots - 10){
					this.trading = true;
					money += 2;
					this.space_slotsfilled += 10;
					spacebuildings.add("Orbital Station");
					System.out.println("An Orbital Trading Station has been constructed on " + this.getName());
				}
			}
		}
		
		
		public Planet(String name, String type, String Owner){
			Name = name;
			owner = Owner;
			setType(type);
			}
		}
	
	public static class Ships {
		String name;
		String class_type;
		int length;
		int cost;
		int power;
		
		public void setName(String Name){
			name = Name;
		}
		public String getName(){
			return name;
		}
		
		public void setClass(String Class){
			switch(Class){
			case "Scout":
				class_type = "Scout";
				length = 50;
				cost = 10;
				power = 5;
				break;
			case "Cruiser":
				length = 250;
				class_type = "Cruiser";
				cost = 35;
				power = 25;
				break;
			case "Frigate":
				length = 400;
				class_type = "Frigate";
				cost = 50;
				power = 42;
				break;
			case "Carrier":
				length = 500;
				class_type = "Carrier";
				cost = 70;
				power = 50;
				break;
			case "Battleship":
				length = 750;
				class_type = "Battleship";
				cost = 65;
				power = 75;
				break;
			case "Dreadnought":
				length = 100;
				class_type = "Dreadnought";
				cost = 75;
				power = 90;
				break;
			}
		}
		public String getClassType(){
			return class_type;
		}
		
		public void setLength(int Length){
			length = Length;
		}
		public int getLength(){
			return length;
		}
		
		public void setCost(int Cost){
			cost = Cost;
		}
		public int getCost(){
			return cost;
		}
		
		public void addComplmement(int complement){
			power += complement;
		}
		
		public void setPower(int Power){
			power = Power;
		}
		public int getPower(){
			return power;
		}

		public Ships(String Name, String Class_type){
			name = Name;
			setClass(Class_type);
		}
		public class Fleet {
			int number_of_ships, total_power;
			String fleet_name;
			ArrayList<Ships> fleet = new ArrayList<Ships>();
			
			public void addShip(Ships ship){
				fleet.add(ship);
			}		
			public void removeShip(Ships ship){
				int placeholder = fleet.indexOf(ship);
				fleet.remove(placeholder);
			}
			public int getPower(){
				return total_power;
			}
			public void setName(String name){
				fleet_name = name;
			}
			public String getName(){
				return fleet_name;
			}
			
			public void calcPower(ArrayList<Ships> ships){
				for(int i = 0; i < ships.size(); i++){
					total_power += ships.get(0).power;
				}
				
			}
		}
	}
		
	public Player(String n_name, String p_name, int credits, int prod){ //constructor
		Nation_name = n_name;
		Player_name = p_name;
		bank = credits;
		player_production = prod;
	}
}
